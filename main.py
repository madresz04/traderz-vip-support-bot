import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# --- √Åll√≠tsd be a TOKEN-t ---
TOKEN = "7764705724:AAE_5U4kt5_iCe0B-m9ZSRgYhMpS76mpgg"

# --- Admin √©rtes√≠t√©shez Telegram ID ---
ADMIN_ID = "christtfxg"  # <- ezt √≠rd √°t a saj√°t vagy az √ºgyf√©l Telegram user ID-j√©re

# --- Gombok ---
def start_keyboard():
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ Yes, I‚Äôve traded before", callback_data="yes"),
            InlineKeyboardButton("‚ùå No, I‚Äôm completely new", callback_data="no")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def vip_keyboard(from_callback=False):
    text = "üîó Join the VIP Group" if from_callback else "üöÄ I want to learn & earn"
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(text, callback_data="vip")]
    ])

# --- √úzenetek ---
WELCOME_MESSAGE = (
    "Hey! üëã Welcome to the official Traderz Group bot ‚Äì glad to have you here! I‚Äôm Chris, founder of the group. üöÄ\n\n"
    "Before we go any further, just a quick question:\n\n"
    "üìä Have you ever traded on the forex/financial markets?\nüëá Choose one:"
)

YES_MESSAGE = (
    "Nice one! üí™ As an experienced trader, you know how much a high-quality entry and a clear plan matter. "
    "That‚Äôs exactly what you‚Äôll get in our *VIP group*:\n\n"
    "‚úÖ 2‚Äì5 premium signals daily\n"
    "‚úÖ Full entries with SL & TP\n"
    "‚úÖ XAUUSD and FX PAIRS\n"
    "‚úÖ Live market updates & analysis\n"
    "‚úÖ Clean, consistent system\n"
    "‚úÖ Active, trader-focused community\n\n"
    "üëá If you‚Äôre ready to take it to the next level, start here:"
)

NO_MESSAGE = (
    "No worries at all ‚Äì everyone starts somewhere. üôè\n\n"
    "Our *VIP group is not just signals* ‚Äì it actually teaches you while you earn. Here‚Äôs what you‚Äôll get:\n\n"
    "‚úÖ Easy-to-follow signals with SL & TP\n"
    "‚úÖ Simple breakdowns of why we enter\n"
    "‚úÖ Weekly summaries to track your learning\n"
    "‚úÖ Supportive community ‚Äì we‚Äôve got your back\n\n"
    "üëá If that sounds good, let‚Äôs get started:"
)

VIP_MESSAGE = (
    "üî• Ready to level up? The Traderz VIP isn‚Äôt just a signal group ‚Äì it‚Äôs a full *trading ecosystem*.\n\n"
    "üéØ Here‚Äôs what‚Äôs included:\n"
    "‚úÖ 2‚Äì5 premium signals daily\n"
    "‚úÖ XAUUSD and FX pairs\n"
    "‚úÖ Risk management, psychology tips, education\n"
    "‚úÖ Weekly breakdowns\n"
    "‚úÖ Direct mentor access\n\n"
    "üíº How to join:\n"
    "1Ô∏è‚É£ Register with our trusted broker:\n"
    "üîó [https://puvip.co/zqeM7r](https://puvip.co/zqeM7r)\n"
    "2Ô∏è‚É£ Make a minimum deposit of *350 USD* üí∞\n"
    "You keep full control of your funds ‚Äì we don‚Äôt touch a cent\n"
    "3Ô∏è‚É£ ‚úÖ *Claim your 50% deposit bonus* ‚Äì available through this link only\n"
    "(Only valid for new accounts using our partner link)\n"
    "4Ô∏è‚É£ Send us your deposit screenshot or account number üì•\n"
    "We‚Äôll activate your VIP access within minutes!\n\n"
    "üëâ *Start winning yourself. Join VIP today.*"
)

# --- Kezel≈ëk ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(WELCOME_MESSAGE, reply_markup=start_keyboard())

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    user = query.from_user
    await query.answer()

    # Admin √©rtes√≠t√©s minden gombra
    msg = f"üë§ @{user.username or user.full_name} ({user.id}) kattintott: /{data}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=msg)

    if data == "yes":
        await query.edit_message_text(YES_MESSAGE, reply_markup=vip_keyboard(True), parse_mode="Markdown")
    elif data == "no":
        await query.edit_message_text(NO_MESSAGE, reply_markup=vip_keyboard(), parse_mode="Markdown")
    elif data == "vip":
        await query.edit_message_text(VIP_MESSAGE, parse_mode="Markdown")

# --- Hibakezel√©s ---
async def unknown_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Please use the menu buttons. If you need help, type /start.")

# --- F≈ëf√ºggv√©ny ---
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_callback))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_message))

    app.run_polling()
